package com.cloudproject.dynamo.controller;

import com.cloudproject.dynamo.models.BucketInputModel;
import com.cloudproject.dynamo.models.MessageTypes;
import com.cloudproject.dynamo.models.ObjectInputModel;
import com.cloudproject.dynamo.models.OutputModel;
import com.cloudproject.dynamo.msgmanager.DynamoServer;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import java.net.SocketException;

@Path("/")
public class Home {

    private static DynamoServer dynamoServer;

    /**
     * Main method, to be used for debugging purposes
     *
     * @param args array of String, may be used for debugging
     */
    public static void main(String[] args) throws SocketException {
        dynamoServer = DynamoServer.startServer(args);
    }

    /**
     * Method to be used to start the server
     * <p>
     * If the API is working correctly, it will return "REST server started successfully!" as output.
     * </p>
     * <p>
     * Otherwise, the appropriate errors will be displayed
     * </p>
     *
     * @return the String "REST server started successfully!"
     */
    @GET
    @Path("start")
    public String start() throws SocketException {
        startDynamoServer();
        return "REST server started successfully!";
    }

    /**
     * Method to be used to shut down the server.
     *
     * @return POJO containing the response message. This is serialized to JSON to give REST API response
     */
    @GET
    @Path("shutdown")
    public OutputModel shutdown() {
        OutputModel outputModel = new OutputModel();
        dynamoServer.shutdownDynamoServer(outputModel);
        dynamoServer = null;
        return outputModel;
    }

    /**
     * Method to be used for creating a new bucket in the database
     * @param inputModel POJO (generated by de-serializing the JSON request body) containing the bucket name
     * @return POJO containing the response message. This is serialized to JSON to give REST API response
     * @throws SocketException may sometimes occur
     */
    @POST
    @Path("bucket")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public OutputModel createBucket(BucketInputModel inputModel) throws SocketException {
        OutputModel outputModel = new OutputModel();
        startDynamoServer();
//        dynamoServer.createBucket(inputModel.getBucketName(), outputModel);
        dynamoServer.forwardToRandNode(MessageTypes.BUCKET_CREATE, inputModel.getBucketName(), outputModel);
//        bucketOutputModel.setResponse("Bucket " + inputModel.getBucketName() + " created successfully");
        return outputModel;
    }

    /**
     * Method to be used for deleting a bucket from the database
     * @param inputModel POJO (generated by de-serailizing the JSON request body) containing the bucket name
     * @return POJO containing the response message. This is serialized to JSON to give REST API response
     * @throws SocketException may sometimes occur
     */
    @DELETE
    @Path("bucket")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public OutputModel deleteBucket(BucketInputModel inputModel) throws SocketException {
        OutputModel outputModel = new OutputModel();
        startDynamoServer();
//        bucketOutputModel.setResponse("Bucket " + inputModel.getBucketName() + " deleted successfully");
        dynamoServer.forwardToRandNode(MessageTypes.BUCKET_DELETE, inputModel.getBucketName(), outputModel);

        return outputModel;
    }

    /**
     * Method to create an object within a specific bucket in the database
     * @param inputModel POJO (generated by de-serializing JSON request body) containing the key and value of the object
     * @param bucketName String (contained in the JSON request body) specifying the name of the bucket in which thhe
     *                   object is to be created
     * @return POJO containing the response message. This is serialized to JSON to give REST API response
     * @throws SocketException may sometimes occur
     */
    @POST
    @Path("{bucketName}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public OutputModel createObject(ObjectInputModel inputModel, @PathParam("bucketName") String bucketName) throws SocketException {
        OutputModel outputModel = new OutputModel();
        startDynamoServer();

        dynamoServer.forwardToRandNode(MessageTypes.OBJECT_CREATE, bucketName, inputModel, outputModel);

        return outputModel;
    }

    /**
     * Method to update an object within a specific bucket in the database
     * @param inputModel POJO (generated by de-serializing JSON request body) containing
     *                   the key and new value of the object
     * @param bucketName String (contained in the JSON request body) specifying the name
     *                   of the bucket in which the object is to be created
     * @return POJO containing the response message. This is serialized to JSON to give REST API response
     * @throws SocketException may sometimes occur
     */
    @PUT
    @Path("{bucketName}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public OutputModel updateObject(ObjectInputModel inputModel, @PathParam("bucketName") String bucketName)
            throws SocketException {
        OutputModel outputModel = new OutputModel();
        startDynamoServer();

        dynamoServer.forwardToRandNode(MessageTypes.OBJECT_UPDATE, bucketName, inputModel, outputModel);

        return outputModel;
    }

    /**
     * Method to delete an object within a specific bucket in the database
     * @param bucketName String (contained in the JSON request body) specifying the name of the bucket in which the
     *                   object is to be created
     * @param key String containing the key of the object to be deleted
     * @return POJO containing the response message. This is serialized to JSON to give REST API response
     * @throws SocketException may sometimes occur
     */
    @DELETE
    @Path("{bucketName}/{objectKey}")
    @Produces(MediaType.APPLICATION_JSON)
    public OutputModel deleteObject(@PathParam("bucketName") String bucketName,
                                    @PathParam("objectKey") String key) throws SocketException {
        OutputModel outputModel = new OutputModel();
        startDynamoServer();

        dynamoServer.forwardToRandNode(MessageTypes.OBJECT_DELETE, bucketName, key, outputModel);

        return outputModel;
    }

    /**
     * Method to fetch an object within a specific bucket in the database
     * @param bucketName String (contained in the JSON request body) specifying the name of the bucket in which the
     *                   object is to be created
     * @param objectKey String containing the key of the object to be read
     * @return POJO containing the response message. This is serialized to JSON to give REST API response
     * @throws SocketException may sometimes occur
     */
    @GET
    @Path("{bucketName}/{objectKey}")
    @Produces(MediaType.APPLICATION_JSON)
    public OutputModel readObject(@PathParam("bucketName") String bucketName,
                                  @PathParam("objectKey") String objectKey) throws SocketException {
        OutputModel outputModel = new OutputModel();
        startDynamoServer();

        dynamoServer.forwardToRandNode(MessageTypes.OBJECT_READ, bucketName, objectKey, outputModel);

        return outputModel;
    }

    /**
     * Method to start the server (currently uses hardcoded values)
     * @throws SocketException may sometimes occur
     */
    private void startDynamoServer() throws SocketException {
        if (dynamoServer == null) {
            dynamoServer = DynamoServer.startServer("REST-Host",
                    "192.168.43.38:9350", "2000", "20000", "true",
                    "172.17.200.222:9350");
        }
    }
}
